<?php

/**
 * @file
 * Contains donation.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\donation\Entity\DonationType;
use Drupal\donation\Plugin\Field\FieldWidget\DonationCustomer as CustomerWidget;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function donation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the donation module.
    case 'help.page.donation':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Donation Entity') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function donation_theme() {
  $theme = [];
  $theme['donation'] = array(
    'render element' => 'elements',
    'file' => 'donation.page.inc',
    'template' => 'donation',
  );
  $theme['donation_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'donation.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function donation_theme_suggestions_donation(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#donation'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'donation__' . $sanitized_view_mode;
  $suggestions[] = 'donation__' . $entity->bundle();
  $suggestions[] = 'donation__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'donation__' . $entity->id();
  $suggestions[] = 'donation__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

function donation_preprocess_donation(&$variables) {
  $donation = $variables['elements']['#donation'];
  $content = $variables['content'];
  ksm($donation->getResponseByMail('mail@matteoborgognoni.it'));
}


/**
 * Implements hook_entity_extra_field_info().
 */
function donation_entity_extra_field_info() {
  $extra = array();
  
  foreach (DonationType::loadMultiple() as $bundle) {
    $extra['donation'][$bundle->Id()]['display']['full_name'] = array(
      'label' => t('Full Name'),
      'description' => t('This is the full name of the donor'),
      'visible' => TRUE,
    );
  
    $extra['donation'][$bundle->Id()]['display']['email'] = array(
      'label' => t('Email'),
      'description' => t('Email address of the donor'),
      'visible' => TRUE,
    );
  
    $extra['donation'][$bundle->Id()]['display']['address'] = array(
      'label' => t('Address'),
      'description' => t('Address of the donor'),
      'visible' => TRUE,
    );
    
    $extra['donation'][$bundle->Id()]['display']['donation_amount'] = array(
      'label' => t('Donation Amount'),
      'description' => t('Amount of the donation'),
      'visible' => TRUE,
    );
  }
  
  return $extra;
}




/**
 * Implements hook_ENTITY_TYPE_view().
 */
function donation_donation_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode, $langcode) {
  
  if ($display->getComponent('full_name')) {
    $build['full_name'] = [
      '#pseudo_field' => TRUE,
      '#label_display' => 'above',
      '#title' => 'Full Name',
      '#type' => 'markup',
      '#markup' => $entity->getFullName(),
    ];
  }
  
  if ($display->getComponent('full_name')) {
    $build['email'] = [
      '#pseudo_field' => TRUE,
      '#label_display' => 'above',
      '#title' => 'Email',
      '#type' => 'markup',
      '#markup' => $entity->getEmail(),
    ];
  }
  
  if ($display->getComponent('address')) {
    $build['address'] = [
      '#pseudo_field' => TRUE,
      '#label_display' => 'above',
      '#title' => 'Address',
      '#type' => 'markup',
      '#markup' => $entity->getAddress(),
    ];
  }
  
  
  if ($display->getComponent('donation_amount')) {
    $build['donation_amount'] = [
      '#pseudo_field' => TRUE,
      '#label_display' => 'above',
      '#title' => 'Donation Amount',
      '#type' => 'markup',
      '#markup' => $entity->getFormattedAmount(),
    ];
  }
  
}